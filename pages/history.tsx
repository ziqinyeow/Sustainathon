import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { withProtected } from "../firebase/auth/hook/route";
import Layout from "../layouts/Layout";
import { Session } from ".prisma/client";
import useAuth from "../firebase/auth/hook/auth";

function Home() {
  const { user }: any = useAuth();
  const [searchValue, setSearchValue] = useState("");
  const [sessions, setSessions] = useState<Session[]>();

  const filteredSessions = sessions
    ?.sort(
      (a, b) => Number(new Date(b.startedAt)) - Number(new Date(a.startedAt))
    )
    .filter((session) =>
      session.class_code.toLowerCase().includes(searchValue.toLowerCase())
    );
  //   console.log(filteredSessions);

  useEffect(() => {
    const fetchSessions = async () => {
      const fetcher = await fetch("/api/db/session/get", {
        method: "POST",
        body: JSON.stringify({ email: user.email, end: true }),
        headers: {
          "Content-Type": "application/json",
        },
      });
      const result = await fetcher.json();

      setSessions(result.ended_session);
    };
    fetchSessions();
  }, [user.email]);

  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <h2 className="mb-7">Dashboard</h2>

        <div className="w-full mt-10">
          <div className="w-full">
            <div className="flex mb-5">
              <h3 className="w-full font-bold">Ended Session</h3>
            </div>
            <div className="flex mb-3">
              <input
                type="text"
                className="w-full px-4 py-2 transition-all duration-200 border rounded-lg hover:bg-gray-100 focus:bg-gray-100"
                placeholder="Search"
                onChange={(e) => setSearchValue(e.target.value)}
              />
            </div>
            <div className="flex justify-end w-full mb-10 text-gray-400">
              {filteredSessions?.length}{" "}
              {filteredSessions && filteredSessions?.length <= 1
                ? "session"
                : "sessions"}
            </div>
            <div className="">
              {filteredSessions && filteredSessions.length !== 0 ? (
                <div>
                  {filteredSessions?.map((session) => (
                    <Link key={session.id} href={`/session/${session.id}`}>
                      <a>
                        <div className="p-6 mb-4 transition-all duration-200 bg-white rounded hover:bg-gray-100">
                          <h4 className="font-bold">{session.class_code}</h4>
                          <h5 className="mb-3 font-medium text-gray-400">
                            {session.name}
                          </h5>
                          <div className="flex items-center space-x-2">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 24 24"
                              width="16"
                              height="16"
                            >
                              <path fill="none" d="M0 0h24v24H0z" />
                              <path d="M17 3h4a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z" />
                            </svg>
                            <h5 className="text-xs font-medium">
                              {new Date(session.startedAt).toLocaleDateString()}
                            </h5>
                            <h5 className="text-xs font-medium">
                              {
                                new Date(session.startedAt)
                                  .toTimeString()
                                  .split(" ")[0]
                              }
                            </h5>
                          </div>
                        </div>
                      </a>
                    </Link>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center w-full p-6 space-y-2 text-gray-600 bg-white rounded-md h-80 min-h-28">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    width="64"
                    height="64"
                  >
                    <path fill="none" d="M0 0h24v24H0z" />
                    <path
                      fill="currentColor"
                      d="M14.997 2L21 8l.001 4.26A5.466 5.466 0 0 0 17.5 11l-.221.004a5.503 5.503 0 0 0-5.127 4.205l-.016.074-.03.02A4.75 4.75 0 0 0 10.878 22L3.993 22a.993.993 0 0 1-.986-.876L3 21.008V2.992c0-.498.387-.927.885-.985L4.002 2h10.995zM17.5 13a3.5 3.5 0 0 1 3.5 3.5l-.001.103a2.75 2.75 0 0 1-.581 5.392L20.25 22h-5.5l-.168-.005a2.75 2.75 0 0 1-.579-5.392L14 16.5a3.5 3.5 0 0 1 3.5-3.5z"
                    />
                  </svg>
                  <h4 className="font-bold">No result</h4>
                </div>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </div>
  );
}
export default withProtected(Home);
